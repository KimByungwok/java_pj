package Java.com.ex;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

public class Member extends JFrame implements ActionListener, ListSelectionListener {
	JPanel leftPanel, rightPanel;
	// 왼쪽 패널
	JPanel scode, sname, sprice, sdivision, Btn;
	//라벨 선언
	JLabel left1lb, left2lb, left3lb, left4lb, left5lb, rightlb;
	//텍스트 필드 선언
	JTextField tf1,tf2,tf3;
	JComboBox<String> combo; // 상품 종류를 위한 콤보박스 선언
	// 버튼 4개 선언
	JButton b1, b2, b3, b4; // 입력, 수정, 삭제, 검색 버튼
	// 리스트 객체 선언
	JList<String> listed; // 데이터베이스 내용을 뿌려주기 위한 리스트 선언
	Vector<String> listdata = new Vector<>(); // 리스트를 위한 벡터 선언

	// 콤보박스에 들어갈 데이터 배열
	String[] data = { "S급", "A급", "B급", "C급" }; // 종류

	// DB 연동을 위한 준비
	static String driver = "org.mariadb.jdbc.Driver";
	static String url = "jdbc:mariadb://Localhost:3308/test";
	static String uid = "root";
	static String pwd = "281471";
	static String query = "select * from quddnr";
	Connection con;
	PreparedStatement pstmt;
	ResultSet rs;

	public Member() {
		// 닫기 버튼을 누르면 메모리에서 해제
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		// 모든 객체 생성
		leftPanel = new JPanel();
		rightPanel = new JPanel(); // 전체적인 왼쪽과 오른쪽 Panel 생성
		
		scode = new JPanel(); // 상품코드를 위한 Panel
		sname = new JPanel(); // 상품명 위한 Panel
		sprice = new JPanel(); // 상품 가격을 위한 Panel
		sdivision = new JPanel(); // 상품 종류를 위한 Panel
		
		Btn = new JPanel(); // 버튼을 위한 Panel

		left1lb = new JLabel("                         상           품           정           보");
		left2lb = new JLabel(" 상  품  코  드 : ");
		left3lb = new JLabel(" 상  품  명      :  ");
		left4lb = new JLabel(" 상  품  가  격  :  ");
		left5lb = new JLabel(" 상  품  종  류  : ");

		rightlb = new JLabel("                               모    든    상    품    보    기 ");
		
		tf1 = new JTextField(15); // 상품 코드를 위한 TextFeild
		tf2 = new JTextField(15); // 상품명을 위한 TextFeild
		tf3 = new JTextField(15); // 상품 가격을 위한 TextFeild
		combo = new JComboBox<String>(data); // 종류를 위한 ComboBox

		b1 = new JButton("입력"); // 버튼 4개 선언
		b2 = new JButton("수정");
		b3 = new JButton("삭제");
		b3.setBackground(Color.RED);
		b4 = new JButton("검색");
		

		listed = new JList<String>(listdata); // 데이터베이스로부터 받아온 정보를 뿌려주기 위한 List 선언

		// 배치하기
		scode.add(left2lb); // 상품코드
		scode.add(tf1);

		sname.add(left3lb); // 상품명
		sname.add(tf2);
		
		sprice.add(left4lb); // 상품 가격
		sprice.add(tf3);

		sdivision.add(left5lb); // 상품 종류
		sdivision.add(combo);

		Btn.add(b1); // 버튼
		Btn.add(b2);
		Btn.add(b3);
		Btn.add(b4);

		// 이벤트 부착
		b1.addActionListener(this);
		b2.addActionListener(this);
		b3.addActionListener(this);
		b4.addActionListener(this);
		listed.addListSelectionListener(this); // implements ListSelectionListener를 시켜주고, valueChanged를 오버라이딩 해줌

		// 새로운 레이아웃 생성 후 배치
		leftPanel.setLayout(new GridLayout(6, 1));
		leftPanel.add(left1lb); // 상품 정보 라벨
		leftPanel.add(scode); // 상품 코드
		leftPanel.add(sname); // 상품명
		leftPanel.add(sprice); // 상품 가격
		leftPanel.add(sdivision); // 상품 종류
		

		leftPanel.add(Btn); // 버튼

		// 새로운 레이아웃 생성 후 배치
		rightPanel.setLayout(new BorderLayout()); // List
		rightPanel.add("North", rightlb);
		rightPanel.add(listed);

		// 프레임의 레이아웃 생성 후 배치
		setLayout(new GridLayout(1, 2)); // 전체적인 틀을 Frame에 붙임
		this.add(leftPanel);
		this.add(rightPanel);

		// left
		setSize(700, 400);
		setVisible(true);

		con(); // 데이터 베이스에 접근 가능하도록 커넥션을 설정
	}

	public static void main(String[] args) {
		new Member();
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		// String data = arg0.getSource(); // 버튼의 객체, 이름을 리턴
		String value = arg0.getActionCommand(); // 버튼의 라벨값을 리턴

		if (value.equals("입력"))
			this.insertMember();

		if (value.equals("수정"))
			this.updateMember();

		if (value.equals("삭제"))
			this.deleteMember();

		if (value.equals("검색"))
			this.getAllMember();
	}

	@Override // 리스트의 이벤트를 위한 메소드
 public void valueChanged(ListSelectionEvent arg0) {
  // 클릭한 데이터를 가져옴
  String value = listed.getSelectedValue();
  // 잘게 데이터를 쪼개서 멤버에 넣어줌
  String str [] = value.split(" ");
  tf1.setText(str[0]);
  tf2.setText(str[1]);
  tf3.setText(str[2]);
  combo.setSelectedItem(str[3]);
  }
  // setSelectedItem() - ComboBox 내용을 가져옴;

  /*for(int i=0 ; i<data.length ; i++){
   if(str[4].equals(data[i])) combo.setSelectedIndex(i);}
  } */

 // 데이터 베이스에 접근 가능하도록 커넥션을 설정
	public void con() {
		try {
			// 어느 데이터베이스를 사용할 것인지를 설정
			Class.forName(driver); // 대소문자 구문
			// 실제 데이터 베이스에 접근하기 위한 소스를 작성 == 접속완료되면 커넥션을 리턴
			con = DriverManager.getConnection(url, uid, pwd);
			System.out.println("DB 접속 완료");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// 입력 버튼을 누르면 실행되는 메소드
	public void insertMember() {
		// 데이터를 모두 입력 받은 후에 데이터 베이스에 연결하여 데이터를 삽입
		// 리스트에다가 상품 정보를 하나의 스트링으로 만든후에 뿌려줌
		try {
			String str = null;

			// 모든 데이터를 가져오시오
			String sql = "insert into quddnr values(?, ?, ?, ?)";
			// 쿼리를 날리기위한 객체를 선언
			pstmt = con.prepareStatement(sql);
			// ?에 데이터를 입력
			pstmt.setString(1, tf1.getText()); // 상품 코드
			pstmt.setString(2, tf2.getText()); // 상품명
			pstmt.setString(3, tf3.getText()); // 상품 가격
			pstmt.setString(4, String.valueOf(combo.getSelectedItem())); // 상품 종류

			// 쿼리실행 = 데이터를 돌려 받을때
			pstmt.executeUpdate();
			
			tf1.setText("");
			tf2.setText("");
			tf3.setText("");
			
			// 다 썻으면 자원을 닫아라
			pstmt.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
		getAllMember(); // 검색 메소드
	}

	// 검색 버튼을 누르면 실행되는 메소드
	public void getAllMember() {
		try {
			listdata.removeAllElements(); // 리스트의 내용을 모두 지워서 초기화시킴
			// 쿼리 준비
			String sql = "select * from quddnr";
			pstmt = con.prepareStatement(sql);
			// 결과를 리턴 받기에 resultset 객체를 선언해서 받음
			rs = pstmt.executeQuery();

			// 반복문을 이용하여 데이터를 가져와서 리스트에 붙임
			String total = "| 상품 코드 | 상품명 | 상품 가격 | 상품 종류 |";
			String total2 = "===================================";
			listdata.add(total);
			listdata.add(total2);
			
			while (rs.next()) {
				String code,name,price,division;
				code= rs.getString(1)+"             ";
				name = rs.getString(2)+"            ";
				price = rs.getString(3)+"               ";
				division = rs.getString(4)+"            ";
				
				listdata.add(code+name+price+division);
				tf1.setText("");
				tf2.setText("");
				tf3.setText("");
			}
			rs.close();
			pstmt.close();

		} catch (Exception e) {
			e.printStackTrace();
		}

		// 백터에 있는 데이터를 리스트에 부착
		listed.setListData(listdata);
	}

	// 수정 버튼을 누르면 실행되는 메소드
	// 코드 를 중심으로 상품명과 상품 금액 상품 종류 수정
	// insertMember()에서 처럼 update 구문에 물음표(?)를 이용해서 구현 가능
	public void updateMember() {
		try {
			String sql = "update quddnr set name=" + "'" + tf2.getText() + "'" + ", price=" + "'"
					+ tf3.getText()+"'"+",division="+"'"+combo.getSelectedItem() + "'" + "where code=" + "'" + tf1.getText() + "'";
			// 쿼리를 날리기위한 객체를 선언
			pstmt = con.prepareStatement(sql);

			// 쿼리실행 = 데이터를 돌려 받을때
			pstmt.executeUpdate();
			tf1.setText("");
			tf2.setText("");
			tf3.setText("");
			// 다 썻으면 자원을 닫아라
			pstmt.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
		getAllMember(); // 검색 메소드
	}

	// 삭제 버튼을 누르면 실행되는 메소드
	// 코드를 중심으로 그 코드에 대한 모든 내용을 삭제
	// insertMember()에서 처럼 delete 구문에 물음표(?)를 이용해서 구현 가능
	public void deleteMember() {
		try {
			String sql = "delete from quddnr where code=" + "'" + tf1.getText() + "'";
			// 쿼리를 날리기위한 객체를 선언
			pstmt = con.prepareStatement(sql);

			// 쿼리실행 = 데이터를 돌려 받을때
			pstmt.executeUpdate();
			// 다 썻으면 자원을 닫아라
			pstmt.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
		getAllMember(); // 검색 메소드
	}
}