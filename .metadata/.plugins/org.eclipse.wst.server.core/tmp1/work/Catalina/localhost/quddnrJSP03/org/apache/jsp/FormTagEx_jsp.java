/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2021-12-22 01:54:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class FormTagEx_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>Insert title here</title>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		<h1>\r\n");
      out.write("			<form action=\"Servletinit\" method=\"Post\">\r\n");
      out.write("				ID : <input type = \"text\" name = \"id\" size = 10><br>\r\n");
      out.write("				PW :<input type = \"password\" name = \"pw\" size = 10><br>\r\n");
      out.write("				이름 : <input type =\"text\" name =\"name\" size = 5><br>\r\n");
      out.write("				전화번호 : <select name = \"firstNum\">\r\n");
      out.write("				<option value = \"010\">010</option>\r\n");
      out.write("				<option value = \"011\">011</option>\r\n");
      out.write("				<option value = \"015\">015</option>\r\n");
      out.write("				<option value = \"019\">019</option>\r\n");
      out.write("				</select> \r\n");
      out.write("				- <input type = \"text\" name = \"secondNum\" size = 4>\r\n");
      out.write("				- <input type = \"text\" name = \"ThirdNum\" size = 4><br>\r\n");
      out.write("				취미 : \r\n");
      out.write("				<input type = \"checkbox\" name = \"hobby\" value = \"game\">게임 &nbsp;\r\n");
      out.write("				<input type = \"checkbox\" name = \"hobby\" value = \"book\">독서 &nbsp;\r\n");
      out.write("				<input type = \"checkbox\" name = \"hobby\" value = \"sleep\">시체 놀이 &nbsp;\r\n");
      out.write("				<input type = \"checkbox\" name = \"hobby\" value = \"Movie\">영화 &nbsp;\r\n");
      out.write("				<input type = \"checkbox\" name = \"hobby\" value = \"pit\">운동 &nbsp;<br>\r\n");
      out.write("				성별 : \r\n");
      out.write("				<input type = \"radio\" name = \"sex\" value = \"M\">남자 &nbsp;\r\n");
      out.write("				<input type = \"radio\" name = \"sex\" value = \"F\">여자 &nbsp;<br>\r\n");
      out.write("				\r\n");
      out.write("				<input type = \"submit\" value = \"서버로 보내\"><br>\r\n");
      out.write("				\r\n");
      out.write("				<input type = \"reset\" value = \"내용 초기화\">\r\n");
      out.write("				\r\n");
      out.write("			</form>\r\n");
      out.write("		</h1>\r\n");
      out.write("	</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--    \r\n");
      out.write("	html form tag \r\n");
      out.write("    html 에서 form tag 란?\r\n");
      out.write("   서버쪽으로 정보를 전달할 떄 사용되는 태그\r\n");
      out.write("   \r\n");
      out.write("    input - 입력\r\n");
      out.write("    type - 태그 종류 지정\r\n");
      out.write("    type = text - 일반적인 텍스트 입력\r\n");
      out.write("    type = password - 패스워드 처럼 ***으로 입력\r\n");
      out.write("    type = submit - 전송 버튼(버튼 자동 생성) form 내의 데이터를 전송할 때 사용\r\n");
      out.write("    type = reset - form 내의 데이터를 초기화할 때 사용\r\n");
      out.write("    type = checkbox - 데이터 값을 여러 개 전송해야 할 때 사용\r\n");
      out.write("    type = radio - 여러 개의 데이터 값 중 한 개 값만을 전송할 때 사용 , checkbox 와 구분이 필요\r\n");
      out.write("    type = select - 리스트 형태의 데이터 사용\r\n");
      out.write("    \r\n");
      out.write("    value - name에 해당하는 값\r\n");
      out.write("    name - Input tag 의 이름\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    form tag에서 action tag 는 목적지(목적 파일)를 지정해줌 (지정한 곳으로 감)\r\n");
      out.write("    component 구성 요소\r\n");
      out.write("   \r\n");
      out.write("   -->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
